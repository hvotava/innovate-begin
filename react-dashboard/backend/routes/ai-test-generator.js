const express = require('express');
const router = express.Router();
const { AIQuestionGenerator, QUESTION_TYPES } = require('../services/ai-question-generator');
const { Lesson } = require('../models');

/**
 * Generate AI test questions based on main question and context
 * POST /api/ai-test-generator/generate
 */
router.post('/generate', async (req, res) => {
  try {
    const { 
      mainQuestion, 
      context = '', 
      requestedTypes = [], 
      language = 'cs',
      lessonId 
    } = req.body;

    console.log('ü§ñ AI Test Generator API called with:', {
      mainQuestion,
      requestedTypes,
      requestedTypesArray: Array.isArray(requestedTypes),
      requestedTypesLength: requestedTypes.length,
      language,
      lessonId
    });

    // Validation
    if (!mainQuestion || mainQuestion.trim().length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Main question is required'
      });
    }

    // Get lesson context if lessonId provided
    let lessonContext = context;
    if (lessonId) {
      try {
        const lesson = await Lesson.findByPk(lessonId);
        if (lesson) {
          lessonContext = `${lessonContext}\n\nLesson: ${lesson.title}\nContent: ${lesson.content || lesson.description || ''}`.trim();
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to fetch lesson context:', error.message);
      }
    }

    // Generate questions using AI
    const generatedQuestions = await AIQuestionGenerator.generateQuestions(
      mainQuestion,
      lessonContext,
      requestedTypes,
      language
    );

    console.log('‚úÖ Successfully generated', generatedQuestions.length, 'questions');

    res.json({
      success: true,
      questions: generatedQuestions,
      metadata: {
        mainQuestion,
        context: lessonContext,
        requestedTypes,
        language,
        generatedAt: new Date().toISOString(),
        count: generatedQuestions.length
      }
    });

  } catch (error) {
    console.error('‚ùå AI Test Generator API error:', error.message);
    
    // If OpenAI is not available, return fallback questions as success
    if (error.message.includes('OpenAI') || error.message.includes('openai')) {
      const fallbackQuestions = AIQuestionGenerator.getFallbackQuestions(req.body.language || 'cs');
      return res.json({
        success: true,
        questions: fallbackQuestions,
        fallbackMode: true,
        message: 'AI slu≈æba nen√≠ dostupn√°. Pou≈æity n√°hradn√≠ ot√°zky.',
        metadata: {
          mainQuestion,
          requestedTypes,
          language,
          generatedAt: new Date().toISOString(),
          count: fallbackQuestions.length
        }
      });
    }
    
    res.status(500).json({
      success: false,
      error: error.message,
      fallbackQuestions: AIQuestionGenerator.getFallbackQuestions(req.body.language || 'cs')
    });
  }
});

/**
 * Get available question types
 * GET /api/ai-test-generator/types
 */
router.get('/types', (req, res) => {
  const language = req.query.language || 'cs';
  
  const typeDescriptions = {
    cs: {
      [QUESTION_TYPES.MULTIPLE_CHOICE]: {
        name: 'Multiple Choice',
        description: 'Ot√°zka s jednou spr√°vnou a nƒõkolika ≈°patn√Ωmi odpovƒõƒèmi',
        icon: 'radio_button_checked',
        example: 'Jak√Ω je hlavn√≠ √∫ƒçel obr√°bƒõc√≠ch kapalin? A) Chlazen√≠ B) Maz√°n√≠ C) Odvod t≈ô√≠sek D) V≈°echny uveden√©'
      },
      [QUESTION_TYPES.FREE_TEXT]: {
        name: 'Voln√° odpovƒõƒè',
        description: 'Ot√°zka, na kterou student odpov√≠d√° vlastn√≠mi slovy',
        icon: 'edit',
        example: 'Popi≈°te hlavn√≠ v√Ωhody pou≈æit√≠ obr√°bƒõc√≠ch kapalin p≈ôi obr√°bƒõn√≠ kov≈Ø.'
      },
      [QUESTION_TYPES.FILL_IN_BLANK]: {
        name: 'Dopl≈àovaƒçka',
        description: 'Vƒõta nebo text s chybƒõj√≠c√≠mi slovy',
        icon: 'text_fields',
        example: 'Obr√°bƒõc√≠ kapaliny slou≈æ√≠ p≈ôedev≈°√≠m k _____ a _____ obr√°bƒõc√≠ho procesu.'
      },
      [QUESTION_TYPES.MATCHING]: {
        name: 'P≈ôi≈ôazov√°n√≠',
        description: 'P≈ôi≈ôazov√°n√≠ pojm≈Ø k jejich definic√≠m',
        icon: 'compare_arrows',
        example: 'P≈ôi≈ôaƒète typy kapalin k jejich vlastnostem: Olejov√° - Vysok√° mazivost, Vodn√≠ - Dobr√© chlazen√≠'
      }
    },
    en: {
      [QUESTION_TYPES.MULTIPLE_CHOICE]: {
        name: 'Multiple Choice',
        description: 'Question with one correct and several wrong answers',
        icon: 'radio_button_checked',
        example: 'What is the main purpose of cutting fluids? A) Cooling B) Lubrication C) Chip removal D) All mentioned'
      },
      [QUESTION_TYPES.FREE_TEXT]: {
        name: 'Free Text',
        description: 'Question answered in student\'s own words',
        icon: 'edit',
        example: 'Describe the main advantages of using cutting fluids in metal machining.'
      },
      [QUESTION_TYPES.FILL_IN_BLANK]: {
        name: 'Fill in the Blank',
        description: 'Sentence or text with missing words',
        icon: 'text_fields',
        example: 'Cutting fluids serve primarily for _____ and _____ of the machining process.'
      },
      [QUESTION_TYPES.MATCHING]: {
        name: 'Matching',
        description: 'Matching terms to their definitions',
        icon: 'compare_arrows',
        example: 'Match fluid types to properties: Oil-based - High lubricity, Water-based - Good cooling'
      }
    }
  };

  res.json({
    success: true,
    types: QUESTION_TYPES,
    descriptions: typeDescriptions[language] || typeDescriptions.cs
  });
});

/**
 * Preview question format for a specific type
 * GET /api/ai-test-generator/preview/:type
 */
router.get('/preview/:type', (req, res) => {
  const { type } = req.params;
  const language = req.query.language || 'cs';

  if (!Object.values(QUESTION_TYPES).includes(type)) {
    return res.status(400).json({
      success: false,
      error: 'Invalid question type'
    });
  }

  // Generate sample question structure for preview
  const sampleQuestions = {
    [QUESTION_TYPES.MULTIPLE_CHOICE]: {
      type: QUESTION_TYPES.MULTIPLE_CHOICE,
      question: 'Uk√°zkov√° multiple choice ot√°zka?',
      options: ['Mo≈ænost A', 'Mo≈ænost B', 'Mo≈ænost C', 'Mo≈ænost D'],
      correctAnswer: 'Mo≈ænost A',
      explanation: 'Vysvƒõtlen√≠ spr√°vn√© odpovƒõdi',
      difficulty: 'medium',
      keyWords: ['kl√≠ƒçov√©', 'pojmy']
    },
    [QUESTION_TYPES.FREE_TEXT]: {
      type: QUESTION_TYPES.FREE_TEXT,
      question: 'Uk√°zkov√° ot√°zka pro volnou odpovƒõƒè?',
      correctAnswer: 'Vzorov√° spr√°vn√° odpovƒõƒè',
      keyWords: ['d≈Øle≈æit√©', 'pojmy', 'pro', 'hodnocen√≠'],
      explanation: 'Co by mƒõla odpovƒõƒè obsahovat',
      difficulty: 'medium'
    },
    [QUESTION_TYPES.FILL_IN_BLANK]: {
      type: QUESTION_TYPES.FILL_IN_BLANK,
      question: 'Uk√°zkov√° vƒõta s _____ a _____ pro doplnƒõn√≠.',
      correctAnswer: 'prvn√≠m slovem',
      alternatives: ['alternativn√≠', 'odpovƒõdi'],
      explanation: 'Vysvƒõtlen√≠ spr√°vn√Ωch odpovƒõd√≠',
      difficulty: 'medium',
      keyWords: ['kontext', 'slova']
    },
    [QUESTION_TYPES.MATCHING]: {
      type: QUESTION_TYPES.MATCHING,
      question: 'P≈ôi≈ôaƒète pojmy k jejich definic√≠m',
      pairs: [
        { term: 'Pojem 1', definition: 'Definice prvn√≠ho pojmu' },
        { term: 'Pojem 2', definition: 'Definice druh√©ho pojmu' },
        { term: 'Pojem 3', definition: 'Definice t≈ôet√≠ho pojmu' }
      ],
      explanation: 'Vysvƒõtlen√≠ spr√°vn√©ho p√°rov√°n√≠',
      difficulty: 'medium',
      keyWords: ['souvisej√≠c√≠', 'pojmy']
    }
  };

  res.json({
    success: true,
    preview: sampleQuestions[type],
    type: type
  });
});

module.exports = router; 